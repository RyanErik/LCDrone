
NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800275c  0800275c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800275c  0800275c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800275c  0800275c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000014  08002778  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002778  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005596  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001346  00000000  00000000  000255d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00026918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00026ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebea  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f58  00000000  00000000  0003600a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057f0a  00000000  00000000  0003cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00094e6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001370  00000000  00000000  00094ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002704 	.word	0x08002704

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002704 	.word	0x08002704

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CS_Select>:

#define NRF24_CSN_PORT GPIOA
#define NRF24_CSN_PIN GPIO_PIN_2

void CS_Select (void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2104      	movs	r1, #4
 800022c:	0018      	movs	r0, r3
 800022e:	f000 fe9f 	bl	8000f70 <HAL_GPIO_WritePin>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	2104      	movs	r1, #4
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fe93 	bl	8000f70 <HAL_GPIO_WritePin>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <CE_Enable>:


void CE_Enable (void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2201      	movs	r2, #1
 800025a:	2102      	movs	r1, #2
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fe87 	bl	8000f70 <HAL_GPIO_WritePin>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <CE_Disable>:

void CE_Disable (void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	2102      	movs	r1, #2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fe7b 	bl	8000f70 <HAL_GPIO_WritePin>
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	0002      	movs	r2, r0
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	1c0a      	adds	r2, r1, #0
 8000290:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2220      	movs	r2, #32
 8000298:	4313      	orrs	r3, r2
 800029a:	b2da      	uxtb	r2, r3
 800029c:	240c      	movs	r4, #12
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	1dba      	adds	r2, r7, #6
 80002a6:	7812      	ldrb	r2, [r2, #0]
 80002a8:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002aa:	f7ff ffb9 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	1939      	adds	r1, r7, r4
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <nrf24_WriteReg+0x48>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	f001 fb90 	bl	80019dc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002bc:	f7ff ffbc 	bl	8000238 <CS_UnSelect>
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b005      	add	sp, #20
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	20000030 	.word	0x20000030

080002cc <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60b9      	str	r1, [r7, #8]
 80002d4:	607a      	str	r2, [r7, #4]
 80002d6:	210f      	movs	r1, #15
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	1c02      	adds	r2, r0, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2220      	movs	r2, #32
 80002e4:	4313      	orrs	r3, r2
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	2414      	movs	r4, #20
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002ee:	f7ff ff97 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002f2:	1939      	adds	r1, r7, r4
 80002f4:	4809      	ldr	r0, [pc, #36]	; (800031c <nrf24_WriteRegMulti+0x50>)
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	2201      	movs	r2, #1
 80002fa:	f001 fb6f 	bl	80019dc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	b29a      	uxth	r2, r3
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <nrf24_WriteRegMulti+0x50>)
 800030a:	f001 fb67 	bl	80019dc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800030e:	f7ff ff93 	bl	8000238 <CS_UnSelect>
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b007      	add	sp, #28
 8000318:	bd90      	pop	{r4, r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	20000030 	.word	0x20000030

08000320 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	0002      	movs	r2, r0
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 800032c:	240f      	movs	r4, #15
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000334:	f7ff ff74 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000338:	1df9      	adds	r1, r7, #7
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <nrf24_ReadReg+0x40>)
 800033c:	2364      	movs	r3, #100	; 0x64
 800033e:	2201      	movs	r2, #1
 8000340:	f001 fb4c 	bl	80019dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000344:	1939      	adds	r1, r7, r4
 8000346:	4806      	ldr	r0, [pc, #24]	; (8000360 <nrf24_ReadReg+0x40>)
 8000348:	2364      	movs	r3, #100	; 0x64
 800034a:	2201      	movs	r2, #1
 800034c:	f001 fca6 	bl	8001c9c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000350:	f7ff ff72 	bl	8000238 <CS_UnSelect>

	return data;
 8000354:	193b      	adds	r3, r7, r4
 8000356:	781b      	ldrb	r3, [r3, #0]
}
 8000358:	0018      	movs	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	b005      	add	sp, #20
 800035e:	bd90      	pop	{r4, r7, pc}
 8000360:	20000030 	.word	0x20000030

08000364 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	0002      	movs	r2, r0
 800036c:	1dfb      	adds	r3, r7, #7
 800036e:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000370:	f7ff ff56 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000374:	1df9      	adds	r1, r7, #7
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <nrfsendCmd+0x28>)
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	2201      	movs	r2, #1
 800037c:	f001 fb2e 	bl	80019dc <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000380:	f7ff ff5a 	bl	8000238 <CS_UnSelect>
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000030 	.word	0x20000030

08000390 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	0002      	movs	r2, r0
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	d104      	bne.n	80003ae <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2007      	movs	r0, #7
 80003a8:	f7ff ff6a 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003ac:	e08b      	b.n	80004c6 <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 80003ae:	1dfb      	adds	r3, r7, #7
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b17      	cmp	r3, #23
 80003b4:	d104      	bne.n	80003c0 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003b6:	2111      	movs	r1, #17
 80003b8:	2017      	movs	r0, #23
 80003ba:	f7ff ff61 	bl	8000280 <nrf24_WriteReg>
}
 80003be:	e082      	b.n	80004c6 <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80003c0:	2108      	movs	r1, #8
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ff5c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003c8:	213f      	movs	r1, #63	; 0x3f
 80003ca:	2001      	movs	r0, #1
 80003cc:	f7ff ff58 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003d0:	2103      	movs	r1, #3
 80003d2:	2002      	movs	r0, #2
 80003d4:	f7ff ff54 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003d8:	2103      	movs	r1, #3
 80003da:	2003      	movs	r0, #3
 80003dc:	f7ff ff50 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003e0:	2103      	movs	r1, #3
 80003e2:	2004      	movs	r0, #4
 80003e4:	f7ff ff4c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003e8:	2102      	movs	r1, #2
 80003ea:	2005      	movs	r0, #5
 80003ec:	f7ff ff48 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003f0:	210e      	movs	r1, #14
 80003f2:	2006      	movs	r0, #6
 80003f4:	f7ff ff44 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2007      	movs	r0, #7
 80003fc:	f7ff ff40 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000400:	2100      	movs	r1, #0
 8000402:	2008      	movs	r0, #8
 8000404:	f7ff ff3c 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000408:	2100      	movs	r1, #0
 800040a:	2009      	movs	r0, #9
 800040c:	f7ff ff38 	bl	8000280 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000410:	2018      	movs	r0, #24
 8000412:	183b      	adds	r3, r7, r0
 8000414:	4a2e      	ldr	r2, [pc, #184]	; (80004d0 <nrf24_reset+0x140>)
 8000416:	6811      	ldr	r1, [r2, #0]
 8000418:	6019      	str	r1, [r3, #0]
 800041a:	7912      	ldrb	r2, [r2, #4]
 800041c:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800041e:	183b      	adds	r3, r7, r0
 8000420:	2205      	movs	r2, #5
 8000422:	0019      	movs	r1, r3
 8000424:	200a      	movs	r0, #10
 8000426:	f7ff ff51 	bl	80002cc <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800042a:	2010      	movs	r0, #16
 800042c:	183b      	adds	r3, r7, r0
 800042e:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <nrf24_reset+0x144>)
 8000430:	6811      	ldr	r1, [r2, #0]
 8000432:	6019      	str	r1, [r3, #0]
 8000434:	7912      	ldrb	r2, [r2, #4]
 8000436:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000438:	183b      	adds	r3, r7, r0
 800043a:	2205      	movs	r2, #5
 800043c:	0019      	movs	r1, r3
 800043e:	200b      	movs	r0, #11
 8000440:	f7ff ff44 	bl	80002cc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000444:	21c3      	movs	r1, #195	; 0xc3
 8000446:	200c      	movs	r0, #12
 8000448:	f7ff ff1a 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800044c:	21c4      	movs	r1, #196	; 0xc4
 800044e:	200d      	movs	r0, #13
 8000450:	f7ff ff16 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000454:	21c5      	movs	r1, #197	; 0xc5
 8000456:	200e      	movs	r0, #14
 8000458:	f7ff ff12 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800045c:	21c6      	movs	r1, #198	; 0xc6
 800045e:	200f      	movs	r0, #15
 8000460:	f7ff ff0e 	bl	8000280 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000464:	2008      	movs	r0, #8
 8000466:	183b      	adds	r3, r7, r0
 8000468:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <nrf24_reset+0x140>)
 800046a:	6811      	ldr	r1, [r2, #0]
 800046c:	6019      	str	r1, [r3, #0]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000472:	183b      	adds	r3, r7, r0
 8000474:	2205      	movs	r2, #5
 8000476:	0019      	movs	r1, r3
 8000478:	2010      	movs	r0, #16
 800047a:	f7ff ff27 	bl	80002cc <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	2011      	movs	r0, #17
 8000482:	f7ff fefd 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	2012      	movs	r0, #18
 800048a:	f7ff fef9 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2013      	movs	r0, #19
 8000492:	f7ff fef5 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000496:	2100      	movs	r1, #0
 8000498:	2014      	movs	r0, #20
 800049a:	f7ff fef1 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800049e:	2100      	movs	r1, #0
 80004a0:	2015      	movs	r0, #21
 80004a2:	f7ff feed 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004a6:	2100      	movs	r1, #0
 80004a8:	2016      	movs	r0, #22
 80004aa:	f7ff fee9 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004ae:	2111      	movs	r1, #17
 80004b0:	2017      	movs	r0, #23
 80004b2:	f7ff fee5 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	201c      	movs	r0, #28
 80004ba:	f7ff fee1 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	201d      	movs	r0, #29
 80004c2:	f7ff fedd 	bl	8000280 <nrf24_WriteReg>
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b008      	add	sp, #32
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	0800271c 	.word	0x0800271c
 80004d4:	08002724 	.word	0x08002724

080004d8 <NRF24_Init>:




void NRF24_Init (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004dc:	f7ff fec4 	bl	8000268 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ff55 	bl	8000390 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff fec9 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004ee:	2100      	movs	r1, #0
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fec5 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004f6:	2100      	movs	r1, #0
 80004f8:	2002      	movs	r0, #2
 80004fa:	f7ff fec1 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80004fe:	2103      	movs	r1, #3
 8000500:	2003      	movs	r0, #3
 8000502:	f7ff febd 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000506:	2100      	movs	r1, #0
 8000508:	2004      	movs	r0, #4
 800050a:	f7ff feb9 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800050e:	2100      	movs	r1, #0
 8000510:	2005      	movs	r0, #5
 8000512:	f7ff feb5 	bl	8000280 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000516:	210e      	movs	r1, #14
 8000518:	2006      	movs	r0, #6
 800051a:	f7ff feb1 	bl	8000280 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800051e:	f7ff fe97 	bl	8000250 <CE_Enable>

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	000a      	movs	r2, r1
 8000532:	1cfb      	adds	r3, r7, #3
 8000534:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	CE_Disable();
 8000536:	f7ff fe97 	bl	8000268 <CE_Disable>

	nrf24_reset (STATUS);
 800053a:	2007      	movs	r0, #7
 800053c:	f7ff ff28 	bl	8000390 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000540:	1cfb      	adds	r3, r7, #3
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	0019      	movs	r1, r3
 8000546:	2005      	movs	r0, #5
 8000548:	f7ff fe9a 	bl	8000280 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800054c:	250f      	movs	r5, #15
 800054e:	197c      	adds	r4, r7, r5
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fee5 	bl	8000320 <nrf24_ReadReg>
 8000556:	0003      	movs	r3, r0
 8000558:	7023      	strb	r3, [r4, #0]
	en_rxaddr = en_rxaddr | (1<<1);
 800055a:	0028      	movs	r0, r5
 800055c:	183b      	adds	r3, r7, r0
 800055e:	183a      	adds	r2, r7, r0
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	2102      	movs	r1, #2
 8000564:	430a      	orrs	r2, r1
 8000566:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000568:	183b      	adds	r3, r7, r0
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	0019      	movs	r1, r3
 800056e:	2002      	movs	r0, #2
 8000570:	f7ff fe86 	bl	8000280 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2205      	movs	r2, #5
 8000578:	0019      	movs	r1, r3
 800057a:	200b      	movs	r0, #11
 800057c:	f7ff fea6 	bl	80002cc <nrf24_WriteRegMulti>
	nrf24_WriteReg (RX_PW_P1, 32);   // 32 bit payload size for pipe 1
 8000580:	2120      	movs	r1, #32
 8000582:	2012      	movs	r0, #18
 8000584:	f7ff fe7c 	bl	8000280 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000588:	250e      	movs	r5, #14
 800058a:	197c      	adds	r4, r7, r5
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff fec7 	bl	8000320 <nrf24_ReadReg>
 8000592:	0003      	movs	r3, r0
 8000594:	7023      	strb	r3, [r4, #0]
	config = config | (1<<1) | (1<<0);
 8000596:	0028      	movs	r0, r5
 8000598:	183b      	adds	r3, r7, r0
 800059a:	183a      	adds	r2, r7, r0
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	2103      	movs	r1, #3
 80005a0:	430a      	orrs	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (CONFIG, config);
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0019      	movs	r1, r3
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff fe68 	bl	8000280 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80005b0:	f7ff fe4e 	bl	8000250 <CE_Enable>
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b004      	add	sp, #16
 80005ba:	bdb0      	pop	{r4, r5, r7, pc}

080005bc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80005c4:	250f      	movs	r5, #15
 80005c6:	197c      	adds	r4, r7, r5
 80005c8:	2007      	movs	r0, #7
 80005ca:	f7ff fea9 	bl	8000320 <nrf24_ReadReg>
 80005ce:	0003      	movs	r3, r0
 80005d0:	7023      	strb	r3, [r4, #0]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80005d2:	0029      	movs	r1, r5
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2240      	movs	r2, #64	; 0x40
 80005da:	4013      	ands	r3, r2
 80005dc:	d00b      	beq.n	80005f6 <isDataAvailable+0x3a>
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	4013      	ands	r3, r2
 80005e8:	d005      	beq.n	80005f6 <isDataAvailable+0x3a>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80005ea:	2140      	movs	r1, #64	; 0x40
 80005ec:	2007      	movs	r0, #7
 80005ee:	f7ff fe47 	bl	8000280 <nrf24_WriteReg>

		return 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <isDataAvailable+0x3c>
	}

	return 0;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bdb0      	pop	{r4, r5, r7, pc}

08000600 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000608:	240f      	movs	r4, #15
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]

	// select the device
	CS_Select();
 8000610:	f7ff fe06 	bl	8000220 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2261      	movs	r2, #97	; 0x61
 8000618:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800061a:	1939      	adds	r1, r7, r4
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <NRF24_Receive+0x58>)
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	f001 f9db 	bl	80019dc <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000626:	23fa      	movs	r3, #250	; 0xfa
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <NRF24_Receive+0x58>)
 800062e:	2220      	movs	r2, #32
 8000630:	f001 fb34 	bl	8001c9c <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000634:	f7ff fe00 	bl	8000238 <CS_UnSelect>

	HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fa51 	bl	8000ae0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	22e2      	movs	r2, #226	; 0xe2
 8000642:	701a      	strb	r2, [r3, #0]
	nrfsendCmd(cmdtosend);
 8000644:	193b      	adds	r3, r7, r4
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fe8b 	bl	8000364 <nrfsendCmd>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b005      	add	sp, #20
 8000654:	bd90      	pop	{r4, r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000030 	.word	0x20000030

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 f9da 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f826 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f8aa 	bl	80007c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800066c:	f000 f86a 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000670:	f7ff ff32 	bl	80004d8 <NRF24_Init>

  //NRF24_TxMode(TxAddress, 10);


   NRF24_RxMode(RxAddress, 10);
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <main+0x50>)
 8000676:	210a      	movs	r1, #10
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ff55 	bl	8000528 <NRF24_RxMode>
	  /*&& HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3) == 1*/
	  /*if(NRF24_Transmit(TxData) == 1){
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
		  HAL_Delay(500);
	  }*/
	  if (isDataAvailable(1) == 1){
 800067e:	2001      	movs	r0, #1
 8000680:	f7ff ff9c 	bl	80005bc <isDataAvailable>
 8000684:	0003      	movs	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d109      	bne.n	800069e <main+0x42>
	  	  	  	NRF24_Receive(RxData);
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0x54>)
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff ffb7 	bl	8000600 <NRF24_Receive>
	  	  	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2110      	movs	r1, #16
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fc86 	bl	8000faa <HAL_GPIO_TogglePin>
	  	  	  }
	  	  	  else{

	  	  	  }
	  	  HAL_Delay(500);
 800069e:	23fa      	movs	r3, #250	; 0xfa
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa1c 	bl	8000ae0 <HAL_Delay>
	  if (isDataAvailable(1) == 1){
 80006a8:	e7e9      	b.n	800067e <main+0x22>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000094 	.word	0x20000094

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b091      	sub	sp, #68	; 0x44
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	2410      	movs	r4, #16
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2330      	movs	r3, #48	; 0x30
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f002 f815 	bl	80026f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	003b      	movs	r3, r7
 80006cc:	0018      	movs	r0, r3
 80006ce:	2310      	movs	r3, #16
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f002 f80e 	bl	80026f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	0021      	movs	r1, r4
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2201      	movs	r2, #1
 80006e4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2202      	movs	r2, #2
 80006ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0252      	lsls	r2, r2, #9
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	02d2      	lsls	r2, r2, #11
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fc6b 	bl	8000fe0 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800070e:	f000 f8af 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	003b      	movs	r3, r7
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	003b      	movs	r3, r7
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	003b      	movs	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072a:	003b      	movs	r3, r7
 800072c:	2101      	movs	r1, #1
 800072e:	0018      	movs	r0, r3
 8000730:	f000 ff74 	bl	800161c <HAL_RCC_ClockConfig>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000738:	f000 f89a 	bl	8000870 <Error_Handler>
  }
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b011      	add	sp, #68	; 0x44
 8000742:	bd90      	pop	{r4, r7, pc}

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_SPI1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_SPI1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000750:	2282      	movs	r2, #130	; 0x82
 8000752:	0052      	lsls	r2, r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_SPI1_Init+0x74>)
 800075e:	22e0      	movs	r2, #224	; 0xe0
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	0092      	lsls	r2, r2, #2
 8000776:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_SPI1_Init+0x74>)
 800077a:	2218      	movs	r2, #24
 800077c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000792:	2207      	movs	r2, #7
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_SPI1_Init+0x74>)
 800079e:	2208      	movs	r2, #8
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_SPI1_Init+0x74>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 f861 	bl	800186c <HAL_SPI_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f85f 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000030 	.word	0x20000030
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	240c      	movs	r4, #12
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f001 ff8f 	bl	80026f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_GPIO_Init+0xac>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_GPIO_Init+0xac>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	03c9      	lsls	r1, r1, #15
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_GPIO_Init+0xac>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	03db      	lsls	r3, r3, #15
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_GPIO_Init+0xac>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_GPIO_Init+0xac>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0289      	lsls	r1, r1, #10
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_GPIO_Init+0xac>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	029b      	lsls	r3, r3, #10
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2200      	movs	r2, #0
 8000814:	2116      	movs	r1, #22
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fbaa 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2216      	movs	r2, #22
 8000820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	193a      	adds	r2, r7, r4
 8000836:	2390      	movs	r3, #144	; 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 fa27 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2208      	movs	r2, #8
 8000846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2202      	movs	r2, #2
 8000852:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	193a      	adds	r2, r7, r4
 8000856:	2390      	movs	r3, #144	; 0x90
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fa17 	bl	8000c90 <HAL_GPIO_Init>

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b009      	add	sp, #36	; 0x24
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>
	...

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_MspInit+0x44>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_MspInit+0x44>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_MspInit+0x44>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x44>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_MspInit+0x44>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61da      	str	r2, [r3, #28]
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_MspInit+0x44>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	; 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2414      	movs	r4, #20
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f001 ff0c 	bl	80026f4 <memset>
  if(hspi->Instance==SPI1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <HAL_SPI_MspInit+0x90>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d132      	bne.n	800094c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_SPI_MspInit+0x94>)
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_SPI_MspInit+0x94>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0149      	lsls	r1, r1, #5
 80008f0:	430a      	orrs	r2, r1
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_SPI_MspInit+0x94>)
 80008f6:	699a      	ldr	r2, [r3, #24]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_SPI_MspInit+0x94>)
 8000904:	695a      	ldr	r2, [r3, #20]
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_SPI_MspInit+0x94>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0289      	lsls	r1, r1, #10
 800090c:	430a      	orrs	r2, r1
 800090e:	615a      	str	r2, [r3, #20]
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_SPI_MspInit+0x94>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	029b      	lsls	r3, r3, #10
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800091e:	0021      	movs	r1, r4
 8000920:	187b      	adds	r3, r7, r1
 8000922:	22e0      	movs	r2, #224	; 0xe0
 8000924:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	187a      	adds	r2, r7, r1
 8000940:	2390      	movs	r3, #144	; 0x90
 8000942:	05db      	lsls	r3, r3, #23
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f9a2 	bl	8000c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b00b      	add	sp, #44	; 0x2c
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	40013000 	.word	0x40013000
 8000958:	40021000 	.word	0x40021000

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f892 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000998:	f7ff fff7 	bl	800098a <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800099c:	4812      	ldr	r0, [pc, #72]	; (80009e8 <LoopForever+0x6>)
    LDR R1, [R0]
 800099e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009a0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <LoopForever+0xa>)
    CMP R1, R2
 80009a4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009a6:	d105      	bne.n	80009b4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009aa:	4912      	ldr	r1, [pc, #72]	; (80009f4 <LoopForever+0x12>)
    STR R1, [R0]
 80009ac:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009b0:	4912      	ldr	r1, [pc, #72]	; (80009fc <LoopForever+0x1a>)
    STR R1, [R0]
 80009b2:	6001      	str	r1, [r0, #0]

080009b4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009b6:	4913      	ldr	r1, [pc, #76]	; (8000a04 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <LoopForever+0x26>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009cc:	4c10      	ldr	r4, [pc, #64]	; (8000a10 <LoopForever+0x2e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009da:	f001 fe67 	bl	80026ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fe3d 	bl	800065c <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   r0, =_estack
 80009e4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009e8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009ec:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009f0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009f4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009f8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009fc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a08:	08002764 	.word	0x08002764
  ldr r2, =_sbss
 8000a0c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a10:	200000b8 	.word	0x200000b8

08000a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_IRQHandler>
	...

08000a18 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_Init+0x24>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_Init+0x24>)
 8000a22:	2110      	movs	r1, #16
 8000a24:	430a      	orrs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f809 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a2e:	f7ff ff25 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a4a:	681c      	ldr	r4, [r3, #0]
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_InitTick+0x60>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0019      	movs	r1, r3
 8000a52:	23fa      	movs	r3, #250	; 0xfa
 8000a54:	0098      	lsls	r0, r3, #2
 8000a56:	f7ff fb57 	bl	8000108 <__udivsi3>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0020      	movs	r0, r4
 8000a60:	f7ff fb52 	bl	8000108 <__udivsi3>
 8000a64:	0003      	movs	r3, r0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f905 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e00f      	b.n	8000a94 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d80b      	bhi.n	8000a92 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	425b      	negs	r3, r3
 8000a80:	2200      	movs	r2, #0
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f8e2 	bl	8000c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_InitTick+0x64>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000010 	.word	0x20000010
 8000aa4:	2000000c 	.word	0x2000000c

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000010 	.word	0x20000010
 8000ac8:	200000b4 	.word	0x200000b4

08000acc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200000b4 	.word	0x200000b4

08000ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fff0 	bl	8000acc <HAL_GetTick>
 8000aec:	0003      	movs	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Delay+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	001a      	movs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	f7ff ffe0 	bl	8000acc <HAL_GetTick>
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000010 	.word	0x20000010

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	d828      	bhi.n	8000b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	589b      	ldr	r3, [r3, r2]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	430a      	orrs	r2, r1
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8e:	e031      	b.n	8000bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0019      	movs	r1, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001c      	movs	r4, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	4023      	ands	r3, r4
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	3306      	adds	r3, #6
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d301      	bcc.n	8000c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e010      	b.n	8000c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SysTick_Config+0x44>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3a01      	subs	r2, #1
 8000c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2103      	movs	r1, #3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff7c 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x44>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x44>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ffbf 	bl	8000c04 <SysTick_Config>
 8000c86:	0003      	movs	r3, r0
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	e14f      	b.n	8000f40 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <HAL_GPIO_Init+0x28>
 8000cb6:	e140      	b.n	8000f3a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	0013      	movs	r3, r2
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2107      	movs	r1, #7
 8000da6:	400b      	ands	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	6939      	ldr	r1, [r7, #16]
 8000dc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	401a      	ands	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	029b      	lsls	r3, r3, #10
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d100      	bne.n	8000e04 <HAL_GPIO_Init+0x174>
 8000e02:	e09a      	b.n	8000f3a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e1c:	4a4f      	ldr	r2, [pc, #316]	; (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	589b      	ldr	r3, [r3, r2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	409a      	lsls	r2, r3
 8000e36:	0013      	movs	r3, r2
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	2390      	movs	r3, #144	; 0x90
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1e2>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a44      	ldr	r2, [pc, #272]	; (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1de>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a43      	ldr	r2, [pc, #268]	; (8000f64 <HAL_GPIO_Init+0x2d4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1da>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a42      	ldr	r2, [pc, #264]	; (8000f68 <HAL_GPIO_Init+0x2d8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1d6>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e66:	2305      	movs	r3, #5
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x1e4>
 8000e72:	2300      	movs	r3, #0
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	2103      	movs	r1, #3
 8000e78:	400a      	ands	r2, r1
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e84:	4935      	ldr	r1, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	035b      	lsls	r3, r3, #13
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43da      	mvns	r2, r3
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	039b      	lsls	r3, r3, #14
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	029b      	lsls	r3, r3, #10
 8000efe:	4013      	ands	r3, r2
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	40da      	lsrs	r2, r3
 8000f48:	1e13      	subs	r3, r2, #0
 8000f4a:	d000      	beq.n	8000f4e <HAL_GPIO_Init+0x2be>
 8000f4c:	e6a8      	b.n	8000ca0 <HAL_GPIO_Init+0x10>
  } 
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b006      	add	sp, #24
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	48000400 	.word	0x48000400
 8000f64:	48000800 	.word	0x48000800
 8000f68:	48000c00 	.word	0x48000c00
 8000f6c:	40010400 	.word	0x40010400

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	0008      	movs	r0, r1
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	1cbb      	adds	r3, r7, #2
 8000f7e:	1c02      	adds	r2, r0, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	1c7b      	adds	r3, r7, #1
 8000f84:	1c0a      	adds	r2, r1, #0
 8000f86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f88:	1c7b      	adds	r3, r7, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e003      	b.n	8000fa2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	1cbb      	adds	r3, r7, #2
 8000fb6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	1cbb      	adds	r3, r7, #2
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	041a      	lsls	r2, r3, #16
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	1cb9      	adds	r1, r7, #2
 8000fce:	8809      	ldrh	r1, [r1, #0]
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e305      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x1e>
 8000ffc:	e08d      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ffe:	4bc5      	ldr	r3, [pc, #788]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	220c      	movs	r2, #12
 8001004:	4013      	ands	r3, r2
 8001006:	2b04      	cmp	r3, #4
 8001008:	d00e      	beq.n	8001028 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100a:	4bc2      	ldr	r3, [pc, #776]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	220c      	movs	r2, #12
 8001010:	4013      	ands	r3, r2
 8001012:	2b08      	cmp	r3, #8
 8001014:	d116      	bne.n	8001044 <HAL_RCC_OscConfig+0x64>
 8001016:	4bbf      	ldr	r3, [pc, #764]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	401a      	ands	r2, r3
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	025b      	lsls	r3, r3, #9
 8001024:	429a      	cmp	r2, r3
 8001026:	d10d      	bne.n	8001044 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	4bba      	ldr	r3, [pc, #744]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	029b      	lsls	r3, r3, #10
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x56>
 8001034:	e070      	b.n	8001118 <HAL_RCC_OscConfig+0x138>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d000      	beq.n	8001040 <HAL_RCC_OscConfig+0x60>
 800103e:	e06b      	b.n	8001118 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e2dc      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_RCC_OscConfig+0x7c>
 800104c:	4bb1      	ldr	r3, [pc, #708]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4bb0      	ldr	r3, [pc, #704]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	0249      	lsls	r1, r1, #9
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e02f      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10c      	bne.n	800107e <HAL_RCC_OscConfig+0x9e>
 8001064:	4bab      	ldr	r3, [pc, #684]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4baa      	ldr	r3, [pc, #680]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800106a:	49ab      	ldr	r1, [pc, #684]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	4ba8      	ldr	r3, [pc, #672]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4ba7      	ldr	r3, [pc, #668]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001076:	49a9      	ldr	r1, [pc, #676]	; (800131c <HAL_RCC_OscConfig+0x33c>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e01e      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0xc4>
 8001086:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4ba2      	ldr	r3, [pc, #648]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	02c9      	lsls	r1, r1, #11
 8001090:	430a      	orrs	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	4b9f      	ldr	r3, [pc, #636]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b9e      	ldr	r3, [pc, #632]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xdc>
 80010a4:	4b9b      	ldr	r3, [pc, #620]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b9a      	ldr	r3, [pc, #616]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010aa:	499b      	ldr	r1, [pc, #620]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	4b98      	ldr	r3, [pc, #608]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b97      	ldr	r3, [pc, #604]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010b6:	4999      	ldr	r1, [pc, #612]	; (800131c <HAL_RCC_OscConfig+0x33c>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d014      	beq.n	80010ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fd02 	bl	8000acc <HAL_GetTick>
 80010c8:	0003      	movs	r3, r0
 80010ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ce:	f7ff fcfd 	bl	8000acc <HAL_GetTick>
 80010d2:	0002      	movs	r2, r0
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b64      	cmp	r3, #100	; 0x64
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e28e      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0xee>
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fced 	bl	8000acc <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fce8 	bl	8000acc <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e279      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b82      	ldr	r3, [pc, #520]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x118>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d100      	bne.n	8001126 <HAL_RCC_OscConfig+0x146>
 8001124:	e06c      	b.n	8001200 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	220c      	movs	r2, #12
 800112c:	4013      	ands	r3, r2
 800112e:	d00e      	beq.n	800114e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001130:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	220c      	movs	r2, #12
 8001136:	4013      	ands	r3, r2
 8001138:	2b08      	cmp	r3, #8
 800113a:	d11f      	bne.n	800117c <HAL_RCC_OscConfig+0x19c>
 800113c:	4b75      	ldr	r3, [pc, #468]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	23c0      	movs	r3, #192	; 0xc0
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	401a      	ands	r2, r3
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	429a      	cmp	r2, r3
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x184>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d001      	beq.n	8001164 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e24c      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	22f8      	movs	r2, #248	; 0xf8
 800116a:	4393      	bics	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	00da      	lsls	r2, r3, #3
 8001174:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e041      	b.n	8001200 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d024      	beq.n	80011ce <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800118a:	2101      	movs	r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fc9c 	bl	8000acc <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fc97 	bl	8000acc <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e228      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f1      	beq.n	800119a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	22f8      	movs	r2, #248	; 0xf8
 80011bc:	4393      	bics	r3, r2
 80011be:	0019      	movs	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	00da      	lsls	r2, r3, #3
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e018      	b.n	8001200 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011d4:	2101      	movs	r1, #1
 80011d6:	438a      	bics	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fc77 	bl	8000acc <HAL_GetTick>
 80011de:	0003      	movs	r3, r0
 80011e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc72 	bl	8000acc <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e203      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2202      	movs	r2, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d1f1      	bne.n	80011e4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	4013      	ands	r3, r2
 8001208:	d036      	beq.n	8001278 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d019      	beq.n	8001246 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001218:	2101      	movs	r1, #1
 800121a:	430a      	orrs	r2, r1
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fc55 	bl	8000acc <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001228:	f7ff fc50 	bl	8000acc <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1e1      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	4b36      	ldr	r3, [pc, #216]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d0f1      	beq.n	8001228 <HAL_RCC_OscConfig+0x248>
 8001244:	e018      	b.n	8001278 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800124c:	2101      	movs	r1, #1
 800124e:	438a      	bics	r2, r1
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fc3b 	bl	8000acc <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc36 	bl	8000acc <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1c7      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2202      	movs	r2, #2
 8001274:	4013      	ands	r3, r2
 8001276:	d1f1      	bne.n	800125c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2204      	movs	r2, #4
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_RCC_OscConfig+0x2a4>
 8001282:	e0b5      	b.n	80013f0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001284:	201f      	movs	r0, #31
 8001286:	183b      	adds	r3, r7, r0
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	055b      	lsls	r3, r3, #21
 8001294:	4013      	ands	r3, r2
 8001296:	d110      	bne.n	80012ba <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800129a:	69da      	ldr	r2, [r3, #28]
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	0549      	lsls	r1, r1, #21
 80012a2:	430a      	orrs	r2, r1
 80012a4:	61da      	str	r2, [r3, #28]
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 80012a8:	69da      	ldr	r2, [r3, #28]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	055b      	lsls	r3, r3, #21
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_OscConfig+0x340>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	d11a      	bne.n	80012fc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_RCC_OscConfig+0x340>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_RCC_OscConfig+0x340>)
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	0049      	lsls	r1, r1, #1
 80012d0:	430a      	orrs	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbfa 	bl	8000acc <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012de:	f7ff fbf5 	bl	8000acc <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b64      	cmp	r3, #100	; 0x64
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e186      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x340>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10f      	bne.n	8001324 <HAL_RCC_OscConfig+0x344>
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800130a:	2101      	movs	r1, #1
 800130c:	430a      	orrs	r2, r1
 800130e:	621a      	str	r2, [r3, #32]
 8001310:	e036      	b.n	8001380 <HAL_RCC_OscConfig+0x3a0>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	40021000 	.word	0x40021000
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	fffbffff 	.word	0xfffbffff
 8001320:	40007000 	.word	0x40007000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x366>
 800132c:	4bb6      	ldr	r3, [pc, #728]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4bb5      	ldr	r3, [pc, #724]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	621a      	str	r2, [r3, #32]
 8001338:	4bb3      	ldr	r3, [pc, #716]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	4bb2      	ldr	r3, [pc, #712]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800133e:	2104      	movs	r1, #4
 8001340:	438a      	bics	r2, r1
 8001342:	621a      	str	r2, [r3, #32]
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x3a0>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x388>
 800134e:	4bae      	ldr	r3, [pc, #696]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	4bad      	ldr	r3, [pc, #692]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001354:	2104      	movs	r1, #4
 8001356:	430a      	orrs	r2, r1
 8001358:	621a      	str	r2, [r3, #32]
 800135a:	4bab      	ldr	r3, [pc, #684]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4baa      	ldr	r3, [pc, #680]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x3a0>
 8001368:	4ba7      	ldr	r3, [pc, #668]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800136a:	6a1a      	ldr	r2, [r3, #32]
 800136c:	4ba6      	ldr	r3, [pc, #664]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800136e:	2101      	movs	r1, #1
 8001370:	438a      	bics	r2, r1
 8001372:	621a      	str	r2, [r3, #32]
 8001374:	4ba4      	ldr	r3, [pc, #656]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4ba3      	ldr	r3, [pc, #652]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800137a:	2104      	movs	r1, #4
 800137c:	438a      	bics	r2, r1
 800137e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fba0 	bl	8000acc <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e009      	b.n	80013a6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb9b 	bl	8000acc <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a9b      	ldr	r2, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x62c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e12b      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	4b98      	ldr	r3, [pc, #608]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x3b2>
 80013b0:	e013      	b.n	80013da <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fb8b 	bl	8000acc <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb86 	bl	8000acc <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a91      	ldr	r2, [pc, #580]	; (800160c <HAL_RCC_OscConfig+0x62c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e116      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b8d      	ldr	r3, [pc, #564]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	4b87      	ldr	r3, [pc, #540]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80013ea:	4989      	ldr	r1, [pc, #548]	; (8001610 <HAL_RCC_OscConfig+0x630>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2210      	movs	r2, #16
 80013f6:	4013      	ands	r3, r2
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12a      	bne.n	8001458 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001408:	2104      	movs	r1, #4
 800140a:	430a      	orrs	r2, r1
 800140c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800140e:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001412:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fb57 	bl	8000acc <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001424:	f7ff fb52 	bl	8000acc <HAL_GetTick>
 8001428:	0002      	movs	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0e3      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001436:	4b74      	ldr	r3, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2202      	movs	r2, #2
 800143c:	4013      	ands	r3, r2
 800143e:	d0f1      	beq.n	8001424 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001440:	4b71      	ldr	r3, [pc, #452]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	22f8      	movs	r2, #248	; 0xf8
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	00da      	lsls	r2, r3, #3
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e034      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	3305      	adds	r3, #5
 800145e:	d111      	bne.n	8001484 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001460:	4b69      	ldr	r3, [pc, #420]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b66      	ldr	r3, [pc, #408]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e01e      	b.n	80014c2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800148a:	2104      	movs	r1, #4
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001494:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fb16 	bl	8000acc <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014a6:	f7ff fb11 	bl	8000acc <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0a2      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b8:	4b53      	ldr	r3, [pc, #332]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f1      	bne.n	80014a6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <HAL_RCC_OscConfig+0x4ec>
 80014ca:	e097      	b.n	80015fc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014cc:	4b4e      	ldr	r3, [pc, #312]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	220c      	movs	r2, #12
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d100      	bne.n	80014da <HAL_RCC_OscConfig+0x4fa>
 80014d8:	e06b      	b.n	80015b2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d14c      	bne.n	800157c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b48      	ldr	r3, [pc, #288]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80014e8:	494a      	ldr	r1, [pc, #296]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff faed 	bl	8000acc <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fae8 	bl	8000acc <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e079      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	049b      	lsls	r3, r3, #18
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	220f      	movs	r2, #15
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <HAL_RCC_OscConfig+0x638>)
 8001530:	4013      	ands	r3, r2
 8001532:	0019      	movs	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	431a      	orrs	r2, r3
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0449      	lsls	r1, r1, #17
 800154e:	430a      	orrs	r2, r1
 8001550:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fabb 	bl	8000acc <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fab6 	bl	8000acc <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e047      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	049b      	lsls	r3, r3, #18
 8001576:	4013      	ands	r3, r2
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x57c>
 800157a:	e03f      	b.n	80015fc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 8001582:	4924      	ldr	r1, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x634>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff faa0 	bl	8000acc <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fa9b 	bl	8000acc <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e02c      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	049b      	lsls	r3, r3, #18
 80015ac:	4013      	ands	r3, r2
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x5b2>
 80015b0:	e024      	b.n	80015fc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e01f      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_RCC_OscConfig+0x628>)
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	025b      	lsls	r3, r3, #9
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d10e      	bne.n	80015f8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	220f      	movs	r2, #15
 80015de:	401a      	ands	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	23f0      	movs	r3, #240	; 0xf0
 80015ec:	039b      	lsls	r3, r3, #14
 80015ee:	401a      	ands	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b008      	add	sp, #32
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40021000 	.word	0x40021000
 800160c:	00001388 	.word	0x00001388
 8001610:	efffffff 	.word	0xefffffff
 8001614:	feffffff 	.word	0xfeffffff
 8001618:	ffc27fff 	.word	0xffc27fff

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b3      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d911      	bls.n	8001662 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	4b55      	ldr	r3, [pc, #340]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e09a      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2202      	movs	r2, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d015      	beq.n	8001698 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	d006      	beq.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 800167c:	21e0      	movs	r1, #224	; 0xe0
 800167e:	00c9      	lsls	r1, r1, #3
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	22f0      	movs	r2, #240	; 0xf0
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d040      	beq.n	8001724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d114      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06e      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e062      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e05b      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f9ea 	bl	8000acc <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff f9e5 	bl	8000acc <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <HAL_RCC_ClockConfig+0x18c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e042      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	220c      	movs	r2, #12
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1ec      	bne.n	80016fe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4013      	ands	r3, r2
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d211      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_RCC_ClockConfig+0x184>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	4013      	ands	r3, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e020      	b.n	8001798 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_RCC_ClockConfig+0x190>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001774:	f000 f820 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001778:	0001      	movs	r1, r0
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x188>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	220f      	movs	r2, #15
 8001782:	4013      	ands	r3, r2
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x194>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	000a      	movs	r2, r1
 800178a:	40da      	lsrs	r2, r3
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x198>)
 800178e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001790:	2003      	movs	r0, #3
 8001792:	f7ff f955 	bl	8000a40 <HAL_InitTick>
  
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	00001388 	.word	0x00001388
 80017ac:	fffff8ff 	.word	0xfffff8ff
 80017b0:	0800272c 	.word	0x0800272c
 80017b4:	20000008 	.word	0x20000008

080017b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	220c      	movs	r2, #12
 80017dc:	4013      	ands	r3, r2
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x30>
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x36>
 80017e6:	e02e      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ea:	613b      	str	r3, [r7, #16]
      break;
 80017ec:	e02e      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	220f      	movs	r2, #15
 80017f4:	4013      	ands	r3, r2
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	220f      	movs	r2, #15
 8001802:	4013      	ands	r3, r2
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_RCC_GetSysClockFreq+0xac>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	401a      	ands	r2, r3
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	025b      	lsls	r3, r3, #9
 8001816:	429a      	cmp	r2, r3
 8001818:	d109      	bne.n	800182e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <HAL_RCC_GetSysClockFreq+0xa4>)
 800181e:	f7fe fc73 	bl	8000108 <__udivsi3>
 8001822:	0003      	movs	r3, r0
 8001824:	001a      	movs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4353      	muls	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e008      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001832:	f7fe fc69 	bl	8000108 <__udivsi3>
 8001836:	0003      	movs	r3, r0
 8001838:	001a      	movs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4353      	muls	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
      break;
 8001844:	e002      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001848:	613b      	str	r3, [r7, #16]
      break;
 800184a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800184c:	693b      	ldr	r3, [r7, #16]
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b006      	add	sp, #24
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000
 800185c:	00f42400 	.word	0x00f42400
 8001860:	0800273c 	.word	0x0800273c
 8001864:	0800274c 	.word	0x0800274c
 8001868:	007a1200 	.word	0x007a1200

0800186c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0a8      	b.n	80019d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2382      	movs	r3, #130	; 0x82
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	429a      	cmp	r2, r3
 8001890:	d009      	beq.n	80018a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
 8001898:	e005      	b.n	80018a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	225d      	movs	r2, #93	; 0x5d
 80018b0:	5c9b      	ldrb	r3, [r3, r2]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d107      	bne.n	80018c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	225c      	movs	r2, #92	; 0x5c
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7fe fffe 	bl	80008c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	225d      	movs	r2, #93	; 0x5d
 80018cc:	2102      	movs	r1, #2
 80018ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2140      	movs	r1, #64	; 0x40
 80018dc:	438a      	bics	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	23e0      	movs	r3, #224	; 0xe0
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d902      	bls.n	80018f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e002      	b.n	80018f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	23f0      	movs	r3, #240	; 0xf0
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	429a      	cmp	r2, r3
 8001902:	d008      	beq.n	8001916 <HAL_SPI_Init+0xaa>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	23e0      	movs	r3, #224	; 0xe0
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	429a      	cmp	r2, r3
 800190e:	d002      	beq.n	8001916 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	2382      	movs	r3, #130	; 0x82
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	2384      	movs	r3, #132	; 0x84
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	400b      	ands	r3, r1
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2102      	movs	r1, #2
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2101      	movs	r1, #1
 800193c:	400b      	ands	r3, r1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6999      	ldr	r1, [r3, #24]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	400b      	ands	r3, r1
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2138      	movs	r1, #56	; 0x38
 8001952:	400b      	ands	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	400b      	ands	r3, r1
 800195e:	431a      	orrs	r2, r3
 8001960:	0011      	movs	r1, r2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	019b      	lsls	r3, r3, #6
 800196a:	401a      	ands	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	2204      	movs	r2, #4
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	2110      	movs	r1, #16
 8001984:	400b      	ands	r3, r1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	2108      	movs	r1, #8
 800198e:	400b      	ands	r3, r1
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	23f0      	movs	r3, #240	; 0xf0
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	400b      	ands	r3, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	0011      	movs	r1, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4907      	ldr	r1, [pc, #28]	; (80019d8 <HAL_SPI_Init+0x16c>)
 80019bc:	400a      	ands	r2, r1
 80019be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	225d      	movs	r2, #93	; 0x5d
 80019ca:	2101      	movs	r1, #1
 80019cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	0018      	movs	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	fffff7ff 	.word	0xfffff7ff

080019dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80019ec:	231f      	movs	r3, #31
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	225c      	movs	r2, #92	; 0x5c
 80019f8:	5c9b      	ldrb	r3, [r3, r2]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_SPI_Transmit+0x26>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e147      	b.n	8001c92 <HAL_SPI_Transmit+0x2b6>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	225c      	movs	r2, #92	; 0x5c
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a0a:	f7ff f85f 	bl	8000acc <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001a12:	2316      	movs	r3, #22
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	1dba      	adds	r2, r7, #6
 8001a18:	8812      	ldrh	r2, [r2, #0]
 8001a1a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	225d      	movs	r2, #93	; 0x5d
 8001a20:	5c9b      	ldrb	r3, [r3, r2]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d004      	beq.n	8001a32 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001a28:	231f      	movs	r3, #31
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a30:	e128      	b.n	8001c84 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_SPI_Transmit+0x64>
 8001a38:	1dbb      	adds	r3, r7, #6
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001a40:	231f      	movs	r3, #31
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a48:	e11c      	b.n	8001c84 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	225d      	movs	r2, #93	; 0x5d
 8001a4e:	2103      	movs	r1, #3
 8001a50:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1dba      	adds	r2, r7, #6
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1dba      	adds	r2, r7, #6
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2244      	movs	r2, #68	; 0x44
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2246      	movs	r2, #70	; 0x46
 8001a80:	2100      	movs	r1, #0
 8001a82:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d110      	bne.n	8001abe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2140      	movs	r1, #64	; 0x40
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	01c9      	lsls	r1, r1, #7
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b40      	cmp	r3, #64	; 0x40
 8001aca:	d007      	beq.n	8001adc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	23e0      	movs	r3, #224	; 0xe0
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d952      	bls.n	8001b8e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_SPI_Transmit+0x11e>
 8001af0:	2316      	movs	r3, #22
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d143      	bne.n	8001b82 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	1c9a      	adds	r2, r3, #2
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b1e:	e030      	b.n	8001b82 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d112      	bne.n	8001b54 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	1c9a      	adds	r2, r3, #2
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b52:	e016      	b.n	8001b82 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b54:	f7fe ffba 	bl	8000acc <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d802      	bhi.n	8001b6a <HAL_SPI_Transmit+0x18e>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_SPI_Transmit+0x194>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d108      	bne.n	8001b82 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001b70:	231f      	movs	r3, #31
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2203      	movs	r2, #3
 8001b76:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	225d      	movs	r2, #93	; 0x5d
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b80:	e080      	b.n	8001c84 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1c9      	bne.n	8001b20 <HAL_SPI_Transmit+0x144>
 8001b8c:	e053      	b.n	8001c36 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_SPI_Transmit+0x1c4>
 8001b96:	2316      	movs	r3, #22
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d145      	bne.n	8001c2c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001bc6:	e031      	b.n	8001c2c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d113      	bne.n	8001bfe <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bfc:	e016      	b.n	8001c2c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bfe:	f7fe ff65 	bl	8000acc <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d802      	bhi.n	8001c14 <HAL_SPI_Transmit+0x238>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	d102      	bne.n	8001c1a <HAL_SPI_Transmit+0x23e>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001c1a:	231f      	movs	r3, #31
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	225d      	movs	r2, #93	; 0x5d
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
          goto error;
 8001c2a:	e02b      	b.n	8001c84 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1c8      	bne.n	8001bc8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	6839      	ldr	r1, [r7, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fcef 	bl	8002620 <SPI_EndRxTxTransaction>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001c72:	231f      	movs	r3, #31
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e003      	b.n	8001c84 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	225d      	movs	r2, #93	; 0x5d
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	225c      	movs	r2, #92	; 0x5c
 8001c88:	2100      	movs	r1, #0
 8001c8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c8c:	231f      	movs	r3, #31
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	781b      	ldrb	r3, [r3, #0]
}
 8001c92:	0018      	movs	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b008      	add	sp, #32
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cac:	2117      	movs	r1, #23
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	225d      	movs	r2, #93	; 0x5d
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d003      	beq.n	8001cc8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001cc6:	e12b      	b.n	8001f20 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	2382      	movs	r3, #130	; 0x82
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d113      	bne.n	8001cfc <HAL_SPI_Receive+0x60>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10f      	bne.n	8001cfc <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	225d      	movs	r2, #93	; 0x5d
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ce4:	1dbb      	adds	r3, r7, #6
 8001ce6:	881c      	ldrh	r4, [r3, #0]
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	0023      	movs	r3, r4
 8001cf4:	f000 f924 	bl	8001f40 <HAL_SPI_TransmitReceive>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	e118      	b.n	8001f2e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	225c      	movs	r2, #92	; 0x5c
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_SPI_Receive+0x6e>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e111      	b.n	8001f2e <HAL_SPI_Receive+0x292>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	225c      	movs	r2, #92	; 0x5c
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d12:	f7fe fedb 	bl	8000acc <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_SPI_Receive+0x8c>
 8001d20:	1dbb      	adds	r3, r7, #6
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8001d28:	2317      	movs	r3, #23
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d30:	e0f6      	b.n	8001f20 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	225d      	movs	r2, #93	; 0x5d
 8001d36:	2104      	movs	r1, #4
 8001d38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1dba      	adds	r2, r7, #6
 8001d4a:	2144      	movs	r1, #68	; 0x44
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1dba      	adds	r2, r7, #6
 8001d54:	2146      	movs	r1, #70	; 0x46
 8001d56:	8812      	ldrh	r2, [r2, #0]
 8001d58:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	23e0      	movs	r3, #224	; 0xe0
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	496a      	ldr	r1, [pc, #424]	; (8001f38 <HAL_SPI_Receive+0x29c>)
 8001d90:	400a      	ands	r2, r1
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	e008      	b.n	8001da8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0149      	lsls	r1, r1, #5
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10f      	bne.n	8001dd4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	495b      	ldr	r1, [pc, #364]	; (8001f3c <HAL_SPI_Receive+0x2a0>)
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d007      	beq.n	8001df2 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2140      	movs	r1, #64	; 0x40
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	23e0      	movs	r3, #224	; 0xe0
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d900      	bls.n	8001e00 <HAL_SPI_Receive+0x164>
 8001dfe:	e071      	b.n	8001ee4 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e00:	e035      	b.n	8001e6e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d117      	bne.n	8001e40 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	330c      	adds	r3, #12
 8001e16:	001a      	movs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	7812      	ldrb	r2, [r2, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2246      	movs	r2, #70	; 0x46
 8001e30:	5a9b      	ldrh	r3, [r3, r2]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b299      	uxth	r1, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2246      	movs	r2, #70	; 0x46
 8001e3c:	5299      	strh	r1, [r3, r2]
 8001e3e:	e016      	b.n	8001e6e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e40:	f7fe fe44 	bl	8000acc <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d802      	bhi.n	8001e56 <HAL_SPI_Receive+0x1ba>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_SPI_Receive+0x1c0>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d108      	bne.n	8001e6e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8001e5c:	2317      	movs	r3, #23
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2203      	movs	r2, #3
 8001e62:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	225d      	movs	r2, #93	; 0x5d
 8001e68:	2101      	movs	r1, #1
 8001e6a:	5499      	strb	r1, [r3, r2]
          goto error;
 8001e6c:	e058      	b.n	8001f20 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2246      	movs	r2, #70	; 0x46
 8001e72:	5a9b      	ldrh	r3, [r3, r2]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1c3      	bne.n	8001e02 <HAL_SPI_Receive+0x166>
 8001e7a:	e039      	b.n	8001ef0 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2201      	movs	r2, #1
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d115      	bne.n	8001eb6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	b292      	uxth	r2, r2
 8001e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	1c9a      	adds	r2, r3, #2
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2246      	movs	r2, #70	; 0x46
 8001ea6:	5a9b      	ldrh	r3, [r3, r2]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b299      	uxth	r1, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2246      	movs	r2, #70	; 0x46
 8001eb2:	5299      	strh	r1, [r3, r2]
 8001eb4:	e016      	b.n	8001ee4 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb6:	f7fe fe09 	bl	8000acc <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d802      	bhi.n	8001ecc <HAL_SPI_Receive+0x230>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Receive+0x236>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8001ed2:	2317      	movs	r3, #23
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	225d      	movs	r2, #93	; 0x5d
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ee2:	e01d      	b.n	8001f20 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2246      	movs	r2, #70	; 0x46
 8001ee8:	5a9b      	ldrh	r3, [r3, r2]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1c5      	bne.n	8001e7c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	6839      	ldr	r1, [r7, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 fb34 	bl	8002564 <SPI_EndRxTransaction>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d004      	beq.n	8001f18 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8001f0e:	2317      	movs	r3, #23
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e003      	b.n	8001f20 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	225d      	movs	r2, #93	; 0x5d
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	225c      	movs	r2, #92	; 0x5c
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f28:	2317      	movs	r3, #23
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b007      	add	sp, #28
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	ffffefff 	.word	0xffffefff
 8001f3c:	ffffbfff 	.word	0xffffbfff

08001f40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	1cbb      	adds	r3, r7, #2
 8001f50:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f56:	2323      	movs	r3, #35	; 0x23
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	225c      	movs	r2, #92	; 0x5c
 8001f62:	5c9b      	ldrb	r3, [r3, r2]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x2c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e1c4      	b.n	80022f6 <HAL_SPI_TransmitReceive+0x3b6>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	225c      	movs	r2, #92	; 0x5c
 8001f70:	2101      	movs	r1, #1
 8001f72:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f74:	f7fe fdaa 	bl	8000acc <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f7c:	201b      	movs	r0, #27
 8001f7e:	183b      	adds	r3, r7, r0
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	215d      	movs	r1, #93	; 0x5d
 8001f84:	5c52      	ldrb	r2, [r2, r1]
 8001f86:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f8e:	2312      	movs	r3, #18
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	1cba      	adds	r2, r7, #2
 8001f94:	8812      	ldrh	r2, [r2, #0]
 8001f96:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f98:	183b      	adds	r3, r7, r0
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d011      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x84>
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	2382      	movs	r3, #130	; 0x82
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d107      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_SPI_TransmitReceive+0x7a>
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d004      	beq.n	8001fc4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001fba:	2323      	movs	r3, #35	; 0x23
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fc2:	e191      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_SPI_TransmitReceive+0x98>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_SPI_TransmitReceive+0x98>
 8001fd0:	1cbb      	adds	r3, r7, #2
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001fd8:	2323      	movs	r3, #35	; 0x23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fe0:	e182      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	225d      	movs	r2, #93	; 0x5d
 8001fe6:	5c9b      	ldrb	r3, [r3, r2]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d003      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	225d      	movs	r2, #93	; 0x5d
 8001ff2:	2105      	movs	r1, #5
 8001ff4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1cba      	adds	r2, r7, #2
 8002006:	2146      	movs	r1, #70	; 0x46
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1cba      	adds	r2, r7, #2
 8002010:	2144      	movs	r1, #68	; 0x44
 8002012:	8812      	ldrh	r2, [r2, #0]
 8002014:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1cba      	adds	r2, r7, #2
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1cba      	adds	r2, r7, #2
 8002028:	8812      	ldrh	r2, [r2, #0]
 800202a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	23e0      	movs	r3, #224	; 0xe0
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	429a      	cmp	r2, r3
 8002042:	d908      	bls.n	8002056 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	49ac      	ldr	r1, [pc, #688]	; (8002300 <HAL_SPI_TransmitReceive+0x3c0>)
 8002050:	400a      	ands	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	e008      	b.n	8002068 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	0149      	lsls	r1, r1, #5
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	4013      	ands	r3, r2
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d007      	beq.n	8002086 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	23e0      	movs	r3, #224	; 0xe0
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	429a      	cmp	r2, r3
 8002090:	d800      	bhi.n	8002094 <HAL_SPI_TransmitReceive+0x154>
 8002092:	e083      	b.n	800219c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x168>
 800209c:	2312      	movs	r3, #18
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d000      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x168>
 80020a6:	e06d      	b.n	8002184 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	1c9a      	adds	r2, r3, #2
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020cc:	e05a      	b.n	8002184 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d11b      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x1d4>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d016      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x1d4>
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d113      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	1c9a      	adds	r2, r3, #2
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	4013      	ands	r3, r2
 800211e:	2b01      	cmp	r3, #1
 8002120:	d11c      	bne.n	800215c <HAL_SPI_TransmitReceive+0x21c>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2246      	movs	r2, #70	; 0x46
 8002126:	5a9b      	ldrh	r3, [r3, r2]
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	b292      	uxth	r2, r2
 800213a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	1c9a      	adds	r2, r3, #2
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2246      	movs	r2, #70	; 0x46
 800214a:	5a9b      	ldrh	r3, [r3, r2]
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b299      	uxth	r1, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2246      	movs	r2, #70	; 0x46
 8002156:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800215c:	f7fe fcb6 	bl	8000acc <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002168:	429a      	cmp	r2, r3
 800216a:	d80b      	bhi.n	8002184 <HAL_SPI_TransmitReceive+0x244>
 800216c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216e:	3301      	adds	r3, #1
 8002170:	d008      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002172:	2323      	movs	r3, #35	; 0x23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2203      	movs	r2, #3
 8002178:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	225d      	movs	r2, #93	; 0x5d
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]
        goto error;
 8002182:	e0b1      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d19f      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x18e>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2246      	movs	r2, #70	; 0x46
 8002192:	5a9b      	ldrh	r3, [r3, r2]
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d199      	bne.n	80020ce <HAL_SPI_TransmitReceive+0x18e>
 800219a:	e089      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x270>
 80021a4:	2312      	movs	r3, #18
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d000      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x270>
 80021ae:	e074      	b.n	800229a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	330c      	adds	r3, #12
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021d6:	e060      	b.n	800229a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d11c      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x2e0>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d017      	beq.n	8002220 <HAL_SPI_TransmitReceive+0x2e0>
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d114      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2201      	movs	r2, #1
 8002228:	4013      	ands	r3, r2
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11e      	bne.n	800226c <HAL_SPI_TransmitReceive+0x32c>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2246      	movs	r2, #70	; 0x46
 8002232:	5a9b      	ldrh	r3, [r3, r2]
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d018      	beq.n	800226c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	330c      	adds	r3, #12
 8002240:	001a      	movs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2246      	movs	r2, #70	; 0x46
 800225a:	5a9b      	ldrh	r3, [r3, r2]
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b299      	uxth	r1, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2246      	movs	r2, #70	; 0x46
 8002266:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002268:	2301      	movs	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800226c:	f7fe fc2e 	bl	8000acc <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	429a      	cmp	r2, r3
 800227a:	d802      	bhi.n	8002282 <HAL_SPI_TransmitReceive+0x342>
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	3301      	adds	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x348>
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002288:	2323      	movs	r3, #35	; 0x23
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	225d      	movs	r2, #93	; 0x5d
 8002294:	2101      	movs	r1, #1
 8002296:	5499      	strb	r1, [r3, r2]
        goto error;
 8002298:	e026      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d199      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x298>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2246      	movs	r2, #70	; 0x46
 80022a8:	5a9b      	ldrh	r3, [r3, r2]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d193      	bne.n	80021d8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f9b2 	bl	8002620 <SPI_EndRxTxTransaction>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d006      	beq.n	80022ce <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80022c0:	2323      	movs	r3, #35	; 0x23
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80022d6:	2323      	movs	r3, #35	; 0x23
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e003      	b.n	80022e8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	225d      	movs	r2, #93	; 0x5d
 80022e4:	2101      	movs	r1, #1
 80022e6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	225c      	movs	r2, #92	; 0x5c
 80022ec:	2100      	movs	r1, #0
 80022ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022f0:	2323      	movs	r3, #35	; 0x23
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b00a      	add	sp, #40	; 0x28
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	ffffefff 	.word	0xffffefff

08002304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	1dfb      	adds	r3, r7, #7
 8002312:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002314:	f7fe fbda 	bl	8000acc <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002324:	f7fe fbd2 	bl	8000acc <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800232c:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	015b      	lsls	r3, r3, #5
 8002332:	0d1b      	lsrs	r3, r3, #20
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	4353      	muls	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233a:	e058      	b.n	80023ee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	d055      	beq.n	80023ee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002342:	f7fe fbc3 	bl	8000acc <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	429a      	cmp	r2, r3
 8002350:	d902      	bls.n	8002358 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d142      	bne.n	80023de <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	21e0      	movs	r1, #224	; 0xe0
 8002364:	438a      	bics	r2, r1
 8002366:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	2382      	movs	r3, #130	; 0x82
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	429a      	cmp	r2, r3
 8002372:	d113      	bne.n	800239c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	2380      	movs	r3, #128	; 0x80
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	429a      	cmp	r2, r3
 800237e:	d005      	beq.n	800238c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	438a      	bics	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	019b      	lsls	r3, r3, #6
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d110      	bne.n	80023ca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	491a      	ldr	r1, [pc, #104]	; (800241c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	0189      	lsls	r1, r1, #6
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	225d      	movs	r2, #93	; 0x5d
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	225c      	movs	r2, #92	; 0x5c
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e017      	b.n	800240e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4013      	ands	r3, r2
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	425a      	negs	r2, r3
 80023fe:	4153      	adcs	r3, r2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	001a      	movs	r2, r3
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d197      	bne.n	800233c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b008      	add	sp, #32
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	20000008 	.word	0x20000008
 800241c:	ffffdfff 	.word	0xffffdfff

08002420 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	; 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800242e:	2317      	movs	r3, #23
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002436:	f7fe fb49 	bl	8000acc <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002446:	f7fe fb41 	bl	8000acc <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	0013      	movs	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	189b      	adds	r3, r3, r2
 8002460:	00da      	lsls	r2, r3, #3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	0d1b      	lsrs	r3, r3, #20
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4353      	muls	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800246c:	e068      	b.n	8002540 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	429a      	cmp	r2, r3
 8002476:	d10a      	bne.n	800248e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	2117      	movs	r1, #23
 8002486:	187b      	adds	r3, r7, r1
 8002488:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800248a:	187b      	adds	r3, r7, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	d055      	beq.n	8002540 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002494:	f7fe fb1a 	bl	8000acc <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d902      	bls.n	80024aa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d142      	bne.n	8002530 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	21e0      	movs	r1, #224	; 0xe0
 80024b6:	438a      	bics	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	2382      	movs	r3, #130	; 0x82
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d113      	bne.n	80024ee <SPI_WaitFifoStateUntilTimeout+0xce>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d005      	beq.n	80024de <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	429a      	cmp	r2, r3
 80024dc:	d107      	bne.n	80024ee <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2140      	movs	r1, #64	; 0x40
 80024ea:	438a      	bics	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d110      	bne.n	800251c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002506:	400a      	ands	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0189      	lsls	r1, r1, #6
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	225c      	movs	r2, #92	; 0x5c
 8002528:	2100      	movs	r1, #0
 800252a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e010      	b.n	8002552 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3b01      	subs	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d18e      	bne.n	800246e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b00a      	add	sp, #40	; 0x28
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	20000008 	.word	0x20000008
 8002560:	ffffdfff 	.word	0xffffdfff

08002564 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	2382      	movs	r3, #130	; 0x82
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	429a      	cmp	r2, r3
 800257a:	d113      	bne.n	80025a4 <SPI_EndRxTransaction+0x40>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	429a      	cmp	r2, r3
 8002586:	d005      	beq.n	8002594 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	429a      	cmp	r2, r3
 8002592:	d107      	bne.n	80025a4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2140      	movs	r1, #64	; 0x40
 80025a0:	438a      	bics	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	0013      	movs	r3, r2
 80025ae:	2200      	movs	r2, #0
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	f7ff fea7 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d007      	beq.n	80025ca <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	2220      	movs	r2, #32
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e026      	b.n	8002618 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	2382      	movs	r3, #130	; 0x82
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11f      	bne.n	8002616 <SPI_EndRxTransaction+0xb2>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	429a      	cmp	r2, r3
 80025e0:	d005      	beq.n	80025ee <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d113      	bne.n	8002616 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	23c0      	movs	r3, #192	; 0xc0
 80025f2:	00d9      	lsls	r1, r3, #3
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	0013      	movs	r3, r2
 80025fc:	2200      	movs	r2, #0
 80025fe:	f7ff ff0f 	bl	8002420 <SPI_WaitFifoStateUntilTimeout>
 8002602:	1e03      	subs	r3, r0, #0
 8002604:	d007      	beq.n	8002616 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	2220      	movs	r2, #32
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e000      	b.n	8002618 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}

08002620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	23c0      	movs	r3, #192	; 0xc0
 8002630:	0159      	lsls	r1, r3, #5
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	0013      	movs	r3, r2
 800263a:	2200      	movs	r2, #0
 800263c:	f7ff fef0 	bl	8002420 <SPI_WaitFifoStateUntilTimeout>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d007      	beq.n	8002654 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	2220      	movs	r2, #32
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e027      	b.n	80026a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	0013      	movs	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	f7ff fe4f 	bl	8002304 <SPI_WaitFlagStateUntilTimeout>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d007      	beq.n	800267a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	2220      	movs	r2, #32
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e014      	b.n	80026a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	23c0      	movs	r3, #192	; 0xc0
 800267e:	00d9      	lsls	r1, r3, #3
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	0013      	movs	r3, r2
 8002688:	2200      	movs	r2, #0
 800268a:	f7ff fec9 	bl	8002420 <SPI_WaitFifoStateUntilTimeout>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d007      	beq.n	80026a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	2220      	movs	r2, #32
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e000      	b.n	80026a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b004      	add	sp, #16
 80026aa:	bd80      	pop	{r7, pc}

080026ac <__libc_init_array>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	2600      	movs	r6, #0
 80026b0:	4d0c      	ldr	r5, [pc, #48]	; (80026e4 <__libc_init_array+0x38>)
 80026b2:	4c0d      	ldr	r4, [pc, #52]	; (80026e8 <__libc_init_array+0x3c>)
 80026b4:	1b64      	subs	r4, r4, r5
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	42a6      	cmp	r6, r4
 80026ba:	d109      	bne.n	80026d0 <__libc_init_array+0x24>
 80026bc:	2600      	movs	r6, #0
 80026be:	f000 f821 	bl	8002704 <_init>
 80026c2:	4d0a      	ldr	r5, [pc, #40]	; (80026ec <__libc_init_array+0x40>)
 80026c4:	4c0a      	ldr	r4, [pc, #40]	; (80026f0 <__libc_init_array+0x44>)
 80026c6:	1b64      	subs	r4, r4, r5
 80026c8:	10a4      	asrs	r4, r4, #2
 80026ca:	42a6      	cmp	r6, r4
 80026cc:	d105      	bne.n	80026da <__libc_init_array+0x2e>
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	00b3      	lsls	r3, r6, #2
 80026d2:	58eb      	ldr	r3, [r5, r3]
 80026d4:	4798      	blx	r3
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7ee      	b.n	80026b8 <__libc_init_array+0xc>
 80026da:	00b3      	lsls	r3, r6, #2
 80026dc:	58eb      	ldr	r3, [r5, r3]
 80026de:	4798      	blx	r3
 80026e0:	3601      	adds	r6, #1
 80026e2:	e7f2      	b.n	80026ca <__libc_init_array+0x1e>
 80026e4:	0800275c 	.word	0x0800275c
 80026e8:	0800275c 	.word	0x0800275c
 80026ec:	0800275c 	.word	0x0800275c
 80026f0:	08002760 	.word	0x08002760

080026f4 <memset>:
 80026f4:	0003      	movs	r3, r0
 80026f6:	1882      	adds	r2, r0, r2
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d100      	bne.n	80026fe <memset+0xa>
 80026fc:	4770      	bx	lr
 80026fe:	7019      	strb	r1, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	e7f9      	b.n	80026f8 <memset+0x4>

08002704 <_init>:
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270a:	bc08      	pop	{r3}
 800270c:	469e      	mov	lr, r3
 800270e:	4770      	bx	lr

08002710 <_fini>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002716:	bc08      	pop	{r3}
 8002718:	469e      	mov	lr, r3
 800271a:	4770      	bx	lr
